commit 6d393617758aa93de2dfeae4d728d62e4f29e6f8
Author: Balazs Nemeth <balazs.nemeth@tmit.bme.hu>
Date:   Thu Oct 31 16:57:44 2019 +0100

    Correct commented algorithm inits

diff --git a/simulator/run_simulation.py b/simulator/run_simulation.py
index 2e10429..902470b 100755
--- a/simulator/run_simulation.py
+++ b/simulator/run_simulation.py
@@ -106,7 +106,7 @@ def run_with_config(config : dict, root_logger_name='simulator') -> tuple:
         try:
             checker = cmf.VolatileResourcesChecker()
             mapper = cmf.ConstructiveMapperFromFractional(checker, log=root_logger, **config['optimization'])
-            # heur_mapping_result_dict = mapper.map(substrate_network, service_instance)
+            heur_mapping_result_dict = mapper.map(substrate_network, service_instance)
         except Exception as e:
             root_logger.exception("Error during heuristic solution: ")
             algorithm_errors.append(traceback.format_exc())
@@ -121,7 +121,7 @@ def run_with_config(config : dict, root_logger_name='simulator') -> tuple:
                                                     config['optimization'], log=root_logger,
                                                     export_ampl_data_path=export_data_if_needed)
             root_logger.info("Solving AMPL...")
-            # ampl_mapping_result_dict = ampl_solver_support.solve()
+            ampl_mapping_result_dict = ampl_solver_support.solve()
         except Exception as e:
             root_logger.exception("Error during AMPL solution: ")
             algorithm_errors.append(traceback.format_exc())
commit 655647045fa4a384b0143d174ff192608ca93bbc
Author: Balazs Nemeth <balazs.nemeth@tmit.bme.hu>
Date:   Tue Oct 29 18:01:05 2019 +0100

    Bugfix with algorithm termination criteria

diff --git a/placement/constraint_violation_checkers.py b/placement/constraint_violation_checkers.py
index 6f2c72f..c572edb 100644
--- a/placement/constraint_violation_checkers.py
+++ b/placement/constraint_violation_checkers.py
@@ -124,6 +124,7 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
         """
         remaining_delay = float(self.sfc_delay)
         all_mobile_node_ids = self.infra.cluster_endpoint_ids + self.infra.mobile_ids
+        negative_rem_delay_subinterval = 0
         # VNFs cannot be mapped to APs, ID-s which are connected to the fixed infra part are not stored separately
         all_fixed_node_ids = self.infra.server_ids + [n for n in self.infra.endpoint_ids if n not in self.infra.cluster_endpoint_ids]
         for u, v in self.sfc_path:
@@ -135,9 +136,11 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
                 remaining_delay -= self.infra.delay_distance(u_host_id, v_host_id)
         if remaining_delay == -float('inf') or remaining_delay == float('inf'):
             raise Exception("Remaining delay cannot be -inf or inf at this point!")
+        if remaining_delay < 0:
+            # if the delay is already negative in the fixed delay, then it will be negative in all intervals
+            negative_rem_delay_subinterval = self.time_interval_count
 
         inf_count_subinterval = 0
-        negative_rem_delay_subinterval = 0
         # stores the AP id for each time interval which, has the lowest delay, obeying the coverage probability
         current_chosen_ap_ids = dict()
         for subinterval in range(1, self.time_interval_count+1):
@@ -163,7 +166,8 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
                     # evaluate the situation for the output numbers
                     if min_wireless_delay_with_cov == float('inf'):
                         inf_count_subinterval += 1
-                    elif rem_delay_in_subint < min_wireless_delay_with_cov:
+                    # we should not go above the negative remaining delay intervals above the total number of intervals
+                    elif rem_delay_in_subint < min_wireless_delay_with_cov and negative_rem_delay_subinterval < self.time_interval_count:
                         negative_rem_delay_subinterval += 1
                     else:
                         rem_delay_in_subint -= min_wireless_delay_with_cov
diff --git a/placement/constructive_mapper_from_fractional.py b/placement/constructive_mapper_from_fractional.py
index 7d53bba..301adf6 100644
--- a/placement/constructive_mapper_from_fractional.py
+++ b/placement/constructive_mapper_from_fractional.py
@@ -159,6 +159,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
                         break
             else:
                 raise UnfeasibleVolatileResourcesProblem("Item {} cannot be mapped anywhere".format(item))
+        self.hashes_of_visited_mappings.add(self.hash_of_current_mapping())
 
     @staticmethod
     def move_item_to_bin(item_to_be_moved, target_bin):
@@ -280,7 +281,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
             else:
                 return False, True
 
-    def get_new_best_bins(self, best_bins) -> tuple:
+    def get_new_best_bins(self, best_bins, any_violations_left=False) -> tuple:
         """
         Returns the new list of the best bins (moving/adding possible),
         and bool to indicate wether we can add another bin if necessary.
@@ -289,7 +290,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
         :param best_bins:
         :return:
         """
-        if self.check_all_constraints_calculate_objective(self.infra):
+        if self.check_all_constraints_calculate_objective(self.infra) and not any_violations_left:
             # we dont have to add next bin, everything is mapped to the current best bins
             return best_bins, False
         else:
@@ -417,6 +418,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
         # get fractional solution: it is completely defined by listing the first 'k' bins according to
         # the definition of the paper in section 2.1.
         # NOTE: 'k' = len(best_bins)
+        any_violation_left = True
         try:
             best_bins = self.get_fist_best_bins()
             # get rounding : map all items somewhere, not neccessarily respecting the constraints.
@@ -425,23 +427,22 @@ class ConstructiveMapperFromFractional(AbstractMapper):
             can_add_next_bin = True
             while can_add_next_bin:
                 anything_left_to_improve = True
-                any_violation_left = True
                 while anything_left_to_improve:
                     # get mapping improvement : improve on the item mappings
                     anything_left_to_improve, any_violation_left = self.improve_item_to_bin_mappings(best_bins)
                 if not any_violation_left:
                     break
                 # get new bin : if there is nothing left to improve with the current bins, we can introduce new ones
-                best_bins, can_add_next_bin = self.get_new_best_bins(best_bins)
+                best_bins, can_add_next_bin = self.get_new_best_bins(best_bins, any_violation_left)
         except UnfeasibleVolatileResourcesProblem as ubp:
             self.log.info(ubp.msg)
             return mapping
 
-        if not self.check_all_constraints_calculate_objective(infra):
-            self.log.info("Bin packing solution not found by the heuristic!")
+        if not self.check_all_constraints_calculate_objective(infra) or any_violation_left:
+            self.log.info("Volatile resources solution not found by the heuristic!")
             return mapping
         else:
-            self.log.info("Bin packing solution found with objective value {}, while fractional optimal value is {}".
+            self.log.info("Volatile resources solution found with objective value {}, while the bin packing fractional optimal value is {}".
                           format(self.objective_value_of_integer_solution, self.objective_value_of_fractional_opt))
             mapping = self.construct_output_mapping(mapping)
             if not mapping.validate_mapping(ns, infra,
