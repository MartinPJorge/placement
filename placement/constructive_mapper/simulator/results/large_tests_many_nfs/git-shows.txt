commit 9e408d0ea5190337bbab62f87749d6c62f3f97ec
Author: UC3M AMPL server <j.martinp@it.uc3m.es>
Date:   Mon Nov 11 16:10:48 2019 +0100

    Tweak metaconfig params for decreasing improvement score

diff --git a/simulator/large_test_meta_config.yml b/simulator/large_test_meta_config.yml
index e396db1..a71c15c 100644
--- a/simulator/large_test_meta_config.yml
+++ b/simulator/large_test_meta_config.yml
@@ -11,6 +11,6 @@ meta_config_values:                                                         # un
   service:
     seed: [0, 1, 2, 3, 4, 5, 6, 7]
   optimization:
-    improvement_score_limit: [0, 1, 2, 3, 4]
+    improvement_score_limit: [3, 2, 1, 4]
   simulator:
-    run_ampl: [True, False, False, False, False]
+    run_ampl: [True, False, False, False]
commit 98c28696237c5d51277ec8b8c927f8a74e65168d
Author: Balazs Nemeth <balazs.nemeth@tmit.bme.hu>
Date:   Fri Nov 8 10:26:47 2019 +0100

    Make delay constraint violation checker threadsafe for AP selection

diff --git a/placement/constraint_violation_checkers.py b/placement/constraint_violation_checkers.py
index c572edb..cbae342 100644
--- a/placement/constraint_violation_checkers.py
+++ b/placement/constraint_violation_checkers.py
@@ -75,21 +75,19 @@ class BinCapacityViolationChecker(BaseConstraintViolationChecker):
 
 class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
 
-    # stores the AP id for each time interval which, has the lowest delay, obeying the coverage probability
-    # The variable needs to be class level, because the AP selection must agree for all SFC-s. It is set to None
-    chosen_ap_ids = None
-
     def __init__(self, items, bins, infra : InfrastructureGMLGraph, ns : ServiceGMLGraph, item_move_function, sfc_delay, sfc_path,
-                 time_interval_count, coverage_threshold):
+                 time_interval_count, coverage_threshold, shared_ap_selection : InvalidableAPSelectionStruct):
         super(DelayAndCoverageViolationChecker, self).__init__(items, bins, infra, ns, item_move_function)
         self.sfc_delay = sfc_delay
         self.sfc_path = sfc_path
         self.affected_nfs = [v for u,v in self.sfc_path]
         self.coverage_threshold = coverage_threshold
         self.time_interval_count = time_interval_count
-        # if a class is instantiated set the value to non existing, and from this point on, any instance of the class is executed,
-        # it must give the same AP selection in all subintervals OR set it back to none, if its constraint is violated.
-        DelayAndCoverageViolationChecker.chosen_ap_ids = None
+        # stores the AP id for each time interval which, has the lowest delay, obeying the coverage probability
+        # The variable needs to be shared among all instances of the class, because the AP selection must agree for all SFC-s.
+        # From this point on, any instance of the class is executed,
+        # it must give the same AP selection in all subintervals OR set it back to invalid, if its constraint is violated.
+        self.chosen_ap_ids = shared_ap_selection
 
     def get_cheapest_ap_id(self, subinterval):
         """
@@ -118,7 +116,7 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
             (number of subintervals, where the SFC delay is infinite;
             number of subintervals, where remaining SFC delay is negative)
         Second number is only informative, if the first number is 0.
-        Updates the DelayAndCoverageViolationChecker.chosen_ap_ids dictionary to reflect the violation metrics returned by the function.
+        Updates the shared chosen_ap_ids struct to reflect the violation metrics returned by the function.
 
         :return: int tuple
         """
@@ -182,22 +180,23 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
                     else:
                         # if AP cannot be selected (due to only coverage criteria, this is a bad mapping in this subinterval
                         inf_count_subinterval += 1
-                        DelayAndCoverageViolationChecker.chosen_ap_ids = None
+                        self.chosen_ap_ids.invalidate()
                 else:
                     raise Exception("AP must always be selected if the delay and coverage are OK in a mapping!")
             else:
-                DelayAndCoverageViolationChecker.chosen_ap_ids = None
+                self.chosen_ap_ids.invalidate()
 
         # if the delay and coverage values are violated in none of the subintervals, then we have an AP selection
         if inf_count_subinterval == 0 and negative_rem_delay_subinterval == 0:
-            if DelayAndCoverageViolationChecker.chosen_ap_ids is not None:
+            if self.chosen_ap_ids.is_valid:
                 # check if the AP selection matches with the earlier one, all SFC-s need to agree on one!
-                for subinterval, ap_id in DelayAndCoverageViolationChecker.chosen_ap_ids.items():
-                    if DelayAndCoverageViolationChecker.chosen_ap_ids[subinterval] != current_chosen_ap_ids[subinterval]:
+                # (which is enforced by the way AP-s are selected, here we execute a check)
+                for subinterval, ap_id in self.chosen_ap_ids.items():
+                    if self.chosen_ap_ids[subinterval] != current_chosen_ap_ids[subinterval]:
                         raise Exception("Some SFC-s do not agree on the selected access points in time interval {} based on "
                                         "minimal delay, coverage obeying method!".format(subinterval))
             else:
-                DelayAndCoverageViolationChecker.chosen_ap_ids = current_chosen_ap_ids
+                self.chosen_ap_ids.add_ap_selection_dict(current_chosen_ap_ids)
 
         return inf_count_subinterval, negative_rem_delay_subinterval
 
@@ -254,29 +253,6 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
 
         return improvement_score
 
-    @staticmethod
-    def calculate_current_ap_selection_cost(infra : InfrastructureGMLGraph):
-        """
-        Sums the cost of the currently selected AP-s if the last calculated constraint violation function found a coverage and delay
-        respecting allocation for all subintervals.
-
-        :param infra:
-        :return:
-        """
-        total_ap_cost = None
-        subinterval_list = [i for i in range(1, infra.time_interval_count+1)]
-        if DelayAndCoverageViolationChecker.chosen_ap_ids is not None:
-            total_ap_cost = 0.0
-            for subinterval, selected_ap_id in DelayAndCoverageViolationChecker.chosen_ap_ids.items():
-                # MAYBE: divide by the number of time intervals as the meaning of an AP cost is to use that for the whole interval
-                # (similarly to the cost of a vCPU for the whole interval)
-                # BUT then we need to modify the AMPL model objective function too for reasonable comparison!!!!
-                total_ap_cost += infra.nodes[selected_ap_id][infra.access_point_usage_cost_str]
-                subinterval_list.remove(subinterval)
-        if len(subinterval_list) != 0 and total_ap_cost is not None:
-            raise Exception("Access point not selected for subintervals: {}".format(subinterval_list))
-        return total_ap_cost
-
 
 class BatteryConstraintViolationChecker(BaseConstraintViolationChecker):
 
diff --git a/placement/constructive_mapper_from_fractional.py b/placement/constructive_mapper_from_fractional.py
index 167779a..a2b58b2 100644
--- a/placement/constructive_mapper_from_fractional.py
+++ b/placement/constructive_mapper_from_fractional.py
@@ -56,6 +56,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
         # list of BinCapacityViolationChecker objects instantiated in the save_global_mapping_task_information fucntion
         self.violation_checkers = None
         self.hashes_of_visited_mappings = set()
+        self.chosen_ap_ids = InvalidableAPSelectionStruct()
 
     @property
     def total_item_weight(self):
@@ -196,6 +197,28 @@ class ConstructiveMapperFromFractional(AbstractMapper):
         ConstructiveMapperFromFractional.move_item_to_bin(item_to_be_moved, original_bin)
         return mapping_hash
 
+    def calculate_current_ap_selection_cost(self):
+        """
+        Sums the cost of the currently selected AP-s if the last calculated constraint violation function found a coverage and delay
+        respecting allocation for all subintervals.
+
+        :param infra:
+        :return:
+        """
+        total_ap_cost = None
+        subinterval_list = [i for i in range(1, self.time_interval_count+1)]
+        if self.chosen_ap_ids.is_valid:
+            total_ap_cost = 0.0
+            for subinterval, selected_ap_id in self.chosen_ap_ids.items():
+                # MAYBE: divide by the number of time intervals as the meaning of an AP cost is to use that for the whole interval
+                # (similarly to the cost of a vCPU for the whole interval)
+                # BUT then we need to modify the AMPL model objective function too for reasonable comparison!!!!
+                total_ap_cost += self.infra.nodes[selected_ap_id][self.infra.access_point_usage_cost_str]
+                subinterval_list.remove(subinterval)
+        if len(subinterval_list) != 0 and total_ap_cost is not None:
+            raise Exception("Access point not selected for subintervals: {}".format(subinterval_list))
+        return total_ap_cost
+
     def improve_item_to_bin_mappings(self, best_bins):
         """
         Moves the item, which increases the objective the least, to one of the best bins where it fits.
@@ -212,7 +235,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
         if len(violating_items) == 0:
             # if the delay violation checker didn't return violating items either, then it must have calculated a complete AP selection!
             # (not the nicest way to communicate this information...)
-            if cvc.DelayAndCoverageViolationChecker.calculate_current_ap_selection_cost(self.infra) is None:
+            if self.calculate_current_ap_selection_cost() is None:
                 raise Exception("If no violations are found by any ViolationChecker, a complete AP selection must exist!")
             return False, False
         else:
@@ -290,7 +313,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
         :param best_bins:
         :return:
         """
-        if self.check_all_constraints_calculate_objective(self.infra) and not any_violations_left:
+        if self.check_all_constraints_calculate_objective(no_logs=True) and not any_violations_left:
             # we dont have to add next bin, everything is mapped to the current best bins
             return best_bins, False
         else:
@@ -311,7 +334,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
                 # it means, that all bins are already in the best bins.
                 return best_bins, False
 
-    def check_all_constraints_calculate_objective(self, infra):
+    def check_all_constraints_calculate_objective(self, no_logs=False):
         """
         Checks if the constructed solution for the bin packing is valid.
         Also calculates the objective_value_of_integer_solution if the solution is valid.
@@ -341,12 +364,11 @@ class ConstructiveMapperFromFractional(AbstractMapper):
         if len(all_items) != 0:
             raise Exception("Item not found in mapped_here structure in any bin!")
         # check if we have a complete allocation for the APs (which implies meeting the delay and coverage constraints)
-        total_ap_selection_cost = cvc.DelayAndCoverageViolationChecker.calculate_current_ap_selection_cost(infra)
+        total_ap_selection_cost = self.calculate_current_ap_selection_cost()
         if total_ap_selection_cost is None:
             self.objective_value_of_integer_solution = None
             return False
         else:
-            self.log.debug("Total cost of access point selections: {}".format(total_ap_selection_cost))
             self.objective_value_of_integer_solution += total_ap_selection_cost
         # easiest is to instantiate a new checker and run its violation checker
         battery_checker = cvc.BatteryConstraintViolationChecker(self.items, self.bins, self.infra, self.ns,
@@ -354,6 +376,10 @@ class ConstructiveMapperFromFractional(AbstractMapper):
                                                                 self.battery_threshold)
         if len(battery_checker.get_violating_items()) > 0:
             return False
+        if not no_logs:
+            self.log.debug("Total cost of access point selections: {}".format(total_ap_selection_cost))
+            self.log.info("Mapping found with all constraints being valid with objective function value {}".
+                          format(self.objective_value_of_integer_solution))
         return True
 
     def construct_output_mapping(self, mapping : VolatileResourcesMapping):
@@ -367,7 +393,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
         mapping[mapping.OBJECTIVE_VALUE] = self.objective_value_of_integer_solution
         for i in self.items:
             mapping[i['node_dict'][self.ns.node_name_str]] = i.mapped_to['node_dict'][self.infra.node_name_str]
-        for subinterval, ap_id in cvc.DelayAndCoverageViolationChecker.chosen_ap_ids.items():
+        for subinterval, ap_id in self.chosen_ap_ids.items():
             mapping.add_access_point_selection(subinterval, self.infra.nodes[ap_id][self.infra.node_name_str])
 
         return mapping
@@ -401,7 +427,8 @@ class ConstructiveMapperFromFractional(AbstractMapper):
             self.violation_checkers.append(cvc.DelayAndCoverageViolationChecker(self.items, self.bins, self.infra, self.ns,
                                                                                 ConstructiveMapperFromFractional.move_item_to_bin,
                                                                                 sfc_delay, sfc_path, self.time_interval_count,
-                                                                                self.coverage_threshold))
+                                                                                self.coverage_threshold,
+                                                                                shared_ap_selection=self.chosen_ap_ids))
 
     def map(self, infra, ns) -> dict:
         start_timestamp = time.time()
@@ -443,7 +470,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
         # we want to save timestamp for all possible outputs (success, not found,
         # if unhandled exception is raised it will stay the default None)
         mapping[mapping.RUNNING_TIME] = time.time() - start_timestamp
-        if not self.check_all_constraints_calculate_objective(infra) or any_violation_left:
+        if not self.check_all_constraints_calculate_objective() or any_violation_left:
             self.log.info("Volatile resources solution not found by the heuristic!")
             return mapping
         else:
diff --git a/placement/support_classes.py b/placement/support_classes.py
index 8e5e378..f872589 100644
--- a/placement/support_classes.py
+++ b/placement/support_classes.py
@@ -147,14 +147,33 @@ class PruneLocalityConstraints(BasePruningStep):
         return items, bins
 
 
-class InvalidableAPSelectionDict(dict):
+class InvalidableAPSelectionStruct(object):
 
-    VALID_STR = "AP_selection_valid"
+    def __init__(self):
+        """
+        Structure to store the AP selection mapping as a shared object between all SFC constraint violation checkers.
+        No variables should be accessed when the struct is invalid!
+        """
+        self.struct_valid = False
+        self.ap_selection = {}
+
+    def __getitem__(self, subinterval_index):
+        assert self.struct_valid
+        return self.ap_selection[subinterval_index]
 
-    def __init__(self, *args, **kwargs):
-        super(InvalidableAPSelectionDict, self).__init__(*args, **kwargs)
-        if InvalidableAPSelectionDict.VALID_STR not in self:
+    def items(self):
+        assert self.struct_valid
+        for k, v in self.ap_selection.items():
+            yield k, v
 
-    def __getitem__(self, item):
-        if item !=
+    def add_ap_selection_dict(self, full_selection : dict):
+        self.struct_valid = True
+        self.ap_selection = dict(full_selection)
+
+    def invalidate(self):
+        self.struct_valid = False
+
+    @property
+    def is_valid(self):
+        return self.struct_valid
 
