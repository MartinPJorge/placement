commit 46bb9700d9ca889fef5a7443e3d0f47d69a4a3a4
Author: Balazs Nemeth <balazs.nemeth@tmit.bme.hu>
Date:   Fri Nov 22 13:15:47 2019 +0100

     Add configs for tests coverage_threshold_variation

diff --git a/simulator/coverage_threshold_variation_base_config.yml b/simulator/coverage_threshold_variation_base_config.yml
new file mode 100644
index 0000000..cbc682c
--- /dev/null
+++ b/simulator/coverage_threshold_variation_base_config.yml
@@ -0,0 +1,44 @@
+# configuration which is small enough to run the AMPL with the demo license
+#================= Infrastructure description section =================#
+infrastructure:
+  gml_file: ""
+  name: "infra"                                       # name of the graph object
+  label: "id"                                         # GML node attribute to be used as graph node id
+  time_interval_count: 24                             # the number of time frames for the optimization t \in (t0, t1)
+  cluster_move_waypoints: "../graphs/trajectories/paths.gml"            # GML file representing the locations of start, finish, path points
+  coverage_blocking_areas: "../graphs/trajectories/containers.gml"      # GML file storing the coverage blocking areas
+  cluster_src_dst_tuples: [["r1c1", "r2c5"]]          # start and finish labels of cluster moves
+  unloaded_battery_alive_prob: 0.99                   # Probability having a not completly depleted battery by the end of the optimization
+                                                      # time interval if no capacity is used on the mobile node. Same value is set for all mobile nodes
+  full_loaded_battery_alive_prob: 0.8                 # Like above, but with fully loaded mobile node.
+  seed: 0                                             # randomization seed
+#================= Service description section =================#
+service:
+  name: "service"                                     # name of the graph object
+  connected_component_sizes: [10]               # list of integers describing the number (by its length) and size of the connected
+                                                      # service graph components. Each components is a series parallel graph
+  sfc_delays: [5]                                 # list of delay values, which the chains can take (infra GML measures them in ms)
+  series_parallel_ratio: 0.7                          # ratio of the series and parallel operations at the service graph generation
+  mobile_nfs_per_sfc: 4                               # The number of NFs in each SFC which must be located in the corresponding mobile cluster
+                                                      # (if a chain is shorter, at most all of the NFs are set but not more).
+  seed: 0                                             # randomization seed (can be different from infra, but they together define the task)
+  min_nf_demand: 0                                    # VNF demand is random.randint(min_nf_demand, max_nf_demand) * nf_demand_units
+  max_nf_demand: 4                # NOTE this ensures that every VNF should be able to be mapped from capacity point of view
+  nf_demand_units: 0.499
+#================= Optimization description section =================#
+optimization:
+  time_interval_count: 24                             # same as infrastructure.time_interval_count
+  coverage_threshold: 0.94                             # Least probability the cluster should be covered at all time instances.
+  battery_threshold: 0.7                               # Least probability which the mobile clusters are not depleted by the end of the
+                                                      # optimization interval with the allocated load.
+                                  # NOTE: this value with full_loaded_battery_alive_prob = 0.5 should always work!
+  improvement_score_limit: 1
+#================= Simulator settings =================#
+simulator:
+  log_file: "mapping.log"
+  console_log_level: "DEBUG"
+  file_log_level: "DEBUG"
+  ampl_model_path: '../ampl/system-model.mod'                           # AMPL model location for the volatile resources model
+  export_ampl_data_path: "../ampl/system-model-generated.dat"           # if given, the generated data is exported for inspection/outer solution
+  run_heuristic: True                                                  # Flags to set which algoritms to run
+  run_ampl: True
\ No newline at end of file
diff --git a/simulator/coverage_threshold_variation_meta_config.yml b/simulator/coverage_threshold_variation_meta_config.yml
new file mode 100644
index 0000000..044085f
--- /dev/null
+++ b/simulator/coverage_threshold_variation_meta_config.yml
@@ -0,0 +1,17 @@
+base_config_file: "coverage_threshold_variation_base_config.yml"                                     # Path to config file which stores the structure and
+                                                                            # the default simulation parameters.
+simulation_name: "coverage_threshold_variation"                                        # String identifying the experiment (folder created for it)
+threads: 2                                                                  # number of parallel executions of simulations
+non_product_groups:                                                         # list of keys from the config file, where instead of product, zipping should be applied for creating the single configs
+  - [optimization.improvement_score_limit, simulator.run_ampl]
+meta_config_values:                                                         # under this a full single config structure can be given, but
+  infrastructure:                                                           # each value should be a list of values
+    gml_file: ["../graphs/infras/valencia-haven/valencia-haven-1.gml", "../graphs/infras/valencia-haven/valencia-haven-2.gml", "../graphs/infras/valencia-haven/valencia-haven-3.gml", "../graphs/infras/valencia-haven/valencia-haven-4.gml"]
+  service:
+    seed: [0, 1, 2, 3, 4, 5]
+  optimization:
+    # probability decreases from 95% at the 'reach' of the AP up to 0% at 1.2*'reach'
+    coverage_threshold: [0.9, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 0.999]
+    improvement_score_limit: [2, 1, 0]
+  simulator:
+    run_ampl: [True, False, False]
commit 190f546799a07f4a0755d61138d497a0e6d31888
Author: Balazs Nemeth <balazs.nemeth@tmit.bme.hu>
Date:   Thu Nov 21 18:23:47 2019 +0100

    Remove way too verbose logging of AP selection change

diff --git a/placement/constraint_violation_checkers.py b/placement/constraint_violation_checkers.py
index 9512ede..8963a38 100644
--- a/placement/constraint_violation_checkers.py
+++ b/placement/constraint_violation_checkers.py
@@ -198,9 +198,11 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
         # if the delay and coverage values are violated in none of the subintervals, then we have an AP selection
         if inf_count_subinterval == 0 and negative_rem_delay_subinterval == 0:
             # replaces the selectino only if the current selection was made based on a more strict latency requirement
-            self.log.debug("Setting current AP selection for SFC {} with delay {}: {}".
-                           format(self.sfc_path, self.sfc_delay, current_chosen_ap_ids))
+            tmp_sfc_delay_of_chosen_aps = self.chosen_ap_ids.current_setting_sfc_delay
             self.chosen_ap_ids.add_ap_selection_dict(current_chosen_ap_ids, self.sfc_delay)
+            if tmp_sfc_delay_of_chosen_aps != self.chosen_ap_ids.current_setting_sfc_delay:
+                self.log.debug("Setting current AP selection for SFC {} with delay {}: {}".
+                               format(self.sfc_path, self.sfc_delay, current_chosen_ap_ids))
 
         return inf_count_subinterval, negative_rem_delay_subinterval
 
