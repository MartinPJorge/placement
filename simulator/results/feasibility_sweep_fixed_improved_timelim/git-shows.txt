commit c1993953a7ef4ff517ec7315c612228716b9ac76
Author: Balazs Nemeth <balazs.nemeth@tmit.bme.hu>
Date:   Fri Nov 15 16:30:08 2019 +0100

    Skipp timeout extraction trials

diff --git a/ampl/ampl_support.py b/ampl/ampl_support.py
index f63d0a2..0e8cfd3 100644
--- a/ampl/ampl_support.py
+++ b/ampl/ampl_support.py
@@ -119,6 +119,10 @@ class AMPLSolverSupport(object):
             return mapping
         elif result_str == 'limit':
             self.log.info("Some limit criteria has been reached!")
+            mapping[VolatileResourcesMapping.WORKED] = False
+            mapping[mapping.RUNNING_TIME] = time.time() - self.start_timestamp
+            return mapping
+            # TODO: this logic of trying to extract the solution DOES NOT WORK
             # NOTE: There might be a feasible solution which is worse than the specified MIP gap, and is feasible.
             try:
                 mapping = self.extract_variables(mapping)
commit f25370cd1cfc162bfb52b3c2cf5b25735700eed3
Author: Balazs Nemeth <balazs.nemeth@tmit.bme.hu>
Date:   Fri Nov 15 15:57:37 2019 +0100

    Coordinate between AP selections based on strictness

diff --git a/placement/constraint_violation_checkers.py b/placement/constraint_violation_checkers.py
index b7b580d..9512ede 100644
--- a/placement/constraint_violation_checkers.py
+++ b/placement/constraint_violation_checkers.py
@@ -197,19 +197,10 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
 
         # if the delay and coverage values are violated in none of the subintervals, then we have an AP selection
         if inf_count_subinterval == 0 and negative_rem_delay_subinterval == 0:
-            if self.chosen_ap_ids.is_valid:
-                # check if the AP selection matches with the earlier one, all SFC-s need to agree on one!
-                # (which is enforced by the way AP-s are selected, here we execute a check)
-                for subinterval, ap_id in self.chosen_ap_ids.items():
-                    if self.chosen_ap_ids[subinterval] != current_chosen_ap_ids[subinterval]:
-                        self.log.info("AP selection disagreement in subinterval {} with SFC {}: current AP {}, existing AP selection {}".
-                                      format(subinterval, self.sfc_path, current_chosen_ap_ids[subinterval],
-                                             self.chosen_ap_ids[subinterval]))
-                        self.log.warn("Some SFC-s do not agree on the selected access points in time interval {} based on "
-                                        "minimal delay, coverage obeying method! Current selection: {}, Existing selection: {}".
-                                        format(subinterval, current_chosen_ap_ids, self.chosen_ap_ids.ap_selection))
-            else:
-                self.chosen_ap_ids.add_ap_selection_dict(current_chosen_ap_ids)
+            # replaces the selectino only if the current selection was made based on a more strict latency requirement
+            self.log.debug("Setting current AP selection for SFC {} with delay {}: {}".
+                           format(self.sfc_path, self.sfc_delay, current_chosen_ap_ids))
+            self.chosen_ap_ids.add_ap_selection_dict(current_chosen_ap_ids, self.sfc_delay)
 
         return inf_count_subinterval, negative_rem_delay_subinterval
 
diff --git a/placement/support_classes.py b/placement/support_classes.py
index f872589..6d0f84a 100644
--- a/placement/support_classes.py
+++ b/placement/support_classes.py
@@ -155,6 +155,7 @@ class InvalidableAPSelectionStruct(object):
         No variables should be accessed when the struct is invalid!
         """
         self.struct_valid = False
+        self.current_setting_sfc_delay = float('inf')
         self.ap_selection = {}
 
     def __getitem__(self, subinterval_index):
@@ -166,12 +167,16 @@ class InvalidableAPSelectionStruct(object):
         for k, v in self.ap_selection.items():
             yield k, v
 
-    def add_ap_selection_dict(self, full_selection : dict):
+    def add_ap_selection_dict(self, full_selection : dict, current_setting_sfc_delay):
         self.struct_valid = True
-        self.ap_selection = dict(full_selection)
+        if current_setting_sfc_delay < self.current_setting_sfc_delay:
+            self.current_setting_sfc_delay = current_setting_sfc_delay
+            self.ap_selection = dict(full_selection)
+        # otherwise we keep the current AP selection because it was set by a stricter SFC
 
     def invalidate(self):
         self.struct_valid = False
+        self.current_setting_sfc_delay = float('inf')
 
     @property
     def is_valid(self):
