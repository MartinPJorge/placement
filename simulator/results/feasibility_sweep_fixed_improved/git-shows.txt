commit 63b4ba926dd64f2d442a1206fb0c2061efa48d85
Author: UC3M AMPL server <j.martinp@it.uc3m.es>
Date:   Thu Nov 14 14:30:38 2019 +0100

    Tweak metaconfig for current test

diff --git a/simulator/feasibility_sweep_meta_config.yml b/simulator/feasibility_sweep_meta_config.yml
index 75f9e0a..b14e50e 100644
--- a/simulator/feasibility_sweep_meta_config.yml
+++ b/simulator/feasibility_sweep_meta_config.yml
@@ -1,6 +1,6 @@
 base_config_file: "feasibility_sweep_base_config.yml"                                     # Path to config file which stores the structure and
                                                                             # the default simulation parameters.
-simulation_name: "feasibility_sweep_fixed"                                        # String identifying the experiment (folder created for it)
+simulation_name: "feasibility_sweep_fixed_improved"                                        # String identifying the experiment (folder created for it)
 threads: 2                                                                  # number of parallel executions of simulations
 non_product_groups:                                                         # list of keys from the config file, where instead of product, zipping should be applied for creating the single configs
   - [optimization.improvement_score_limit, simulator.run_ampl]
commit 0ef5493ccb496a1b1d2579a3fa36a9433e8cf6f9
Author: Balazs Nemeth <balazs.nemeth@tmit.bme.hu>
Date:   Thu Nov 14 14:18:14 2019 +0100

    Add epsilons to float comparisons

diff --git a/placement/constraint_violation_checkers.py b/placement/constraint_violation_checkers.py
index cbae342..7f6c004 100644
--- a/placement/constraint_violation_checkers.py
+++ b/placement/constraint_violation_checkers.py
@@ -88,6 +88,7 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
         # From this point on, any instance of the class is executed,
         # it must give the same AP selection in all subintervals OR set it back to invalid, if its constraint is violated.
         self.chosen_ap_ids = shared_ap_selection
+        self.EPSILON = 1e-5
 
     def get_cheapest_ap_id(self, subinterval):
         """
@@ -102,9 +103,9 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
         min_ap_cost = float('inf')
         min_cost_ap_id = None
         for ap_id, coverage_prob in self.infra.ap_coverage_probabilities[master_mobile_id][subinterval].items():
-            if coverage_prob > self.coverage_threshold:
+            if coverage_prob > self.coverage_threshold + self.EPSILON:
                 ap_cost = self.infra.nodes[ap_id][self.infra.access_point_usage_cost_str]
-                if ap_cost < min_ap_cost:
+                if ap_cost + self.EPSILON < min_ap_cost:
                     min_ap_cost = ap_cost
                     min_cost_ap_id = ap_id
         return min_cost_ap_id
@@ -134,7 +135,7 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
                 remaining_delay -= self.infra.delay_distance(u_host_id, v_host_id)
         if remaining_delay == -float('inf') or remaining_delay == float('inf'):
             raise Exception("Remaining delay cannot be -inf or inf at this point!")
-        if remaining_delay < 0:
+        if remaining_delay + self.EPSILON < 0:
             # if the delay is already negative in the fixed delay, then it will be negative in all intervals
             negative_rem_delay_subinterval = self.time_interval_count
 
@@ -153,19 +154,22 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
                     # find the best possible delay, which obeys the coverage probabilty through ANY access point.
                     # NOTE: We cannot select the cheapest AP, even if there are multiple access points which obey the delay requirement,
                     # because then multiple SFC delays could result in different AP selections. So we need to select the lowest delay one
-                    # and save it in a static class variable
+                    # and save it in a shared variable
+                    # NOTE: other option to find the lowest delay SFC and for all other SFC choose the cheapest (deterministically)
+                    # which is below the lowest delay. Requires more coordination bentween SFC violation checkers
                     min_wireless_delay_with_cov = float('inf')
                     for ap_id in self.infra.access_point_ids:
                         curr_wireless_delay_with_cov = self.infra.delay_distance(u_host_id, v_host_id, subinterval,
                                                                                  self.coverage_threshold, ap_id)
-                        if curr_wireless_delay_with_cov < min_wireless_delay_with_cov:
+                        if curr_wireless_delay_with_cov + self.EPSILON < min_wireless_delay_with_cov:
                             min_wireless_delay_with_cov = curr_wireless_delay_with_cov
                             min_delay_though_ap_id = ap_id
                     # evaluate the situation for the output numbers
                     if min_wireless_delay_with_cov == float('inf'):
                         inf_count_subinterval += 1
                     # we should not go above the negative remaining delay intervals above the total number of intervals
-                    elif rem_delay_in_subint < min_wireless_delay_with_cov and negative_rem_delay_subinterval < self.time_interval_count:
+                    elif rem_delay_in_subint + self.EPSILON < min_wireless_delay_with_cov and \
+                            negative_rem_delay_subinterval < self.time_interval_count:
                         negative_rem_delay_subinterval += 1
                     else:
                         rem_delay_in_subint -= min_wireless_delay_with_cov
@@ -194,7 +198,8 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
                 for subinterval, ap_id in self.chosen_ap_ids.items():
                     if self.chosen_ap_ids[subinterval] != current_chosen_ap_ids[subinterval]:
                         raise Exception("Some SFC-s do not agree on the selected access points in time interval {} based on "
-                                        "minimal delay, coverage obeying method!".format(subinterval))
+                                        "minimal delay, coverage obeying method! Current selection: {}, Existing selection: {}".
+                                        format(subinterval, current_chosen_ap_ids, self.chosen_ap_ids))
             else:
                 self.chosen_ap_ids.add_ap_selection_dict(current_chosen_ap_ids)
 
diff --git a/placement/constructive_mapper_from_fractional.py b/placement/constructive_mapper_from_fractional.py
index a3a17cf..2aa02f8 100644
--- a/placement/constructive_mapper_from_fractional.py
+++ b/placement/constructive_mapper_from_fractional.py
@@ -42,7 +42,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
             self.log.setLevel(log.getEffectiveLevel())
 
         # these might not be needed if we override the functions with other heuristics.
-        self.epsilon = 1e-3
+        self.EPSILON = 1e-5
         self.min_bin_preference = None
         self.improvement_score_limit = improvement_score_limit
         # compulsory parameters
@@ -83,7 +83,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
                           node_dict[infra.infra_unit_cost_str], node_dict, mapped_here=[])
                 if bin['capacity'] >= min_weighted_item['weight']:
                     self.bins.append(bin)
-                elif bin['capacity'] > self.epsilon:
+                elif bin['capacity'] > self.EPSILON:
                     # items and bins with 0 capacity might appear as access points
                     self.log.info("Discarding bin {} because it cannot fit even the smallest item".format(bin))
             else:
@@ -287,7 +287,7 @@ class ConstructiveMapperFromFractional(AbstractMapper):
                             # setting must unambiguously identify the AP selection.
                             # see "# NOTE" in DelayAndCoverageViolationChecker.calculate_violations
                             # TODO: work out a way to include improvement on AP selection cost?? (difficult, not fit well to the current design)
-                            if cost_of_improvement < cost_of_cheapest_improvement:
+                            if cost_of_improvement + self.EPSILON < cost_of_cheapest_improvement:
                                 cost_of_cheapest_improvement = cost_of_improvement
                                 target_bin = bin
                                 item_to_be_moved = item
