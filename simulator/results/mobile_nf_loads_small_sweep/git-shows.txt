commit 170c02b0d257b56d399cc40fa95005ab39ee3e72
Author: UC3M AMPL server <j.martinp@it.uc3m.es>
Date:   Thu Nov 21 18:15:37 2019 +0100

    Add small sweep for the battery threshold test

diff --git a/simulator/mobile_nf_loads_small_sweep_base_config.yml b/simulator/mobile_nf_loads_small_sweep_base_config.yml
new file mode 100644
index 0000000..a3e962e
--- /dev/null
+++ b/simulator/mobile_nf_loads_small_sweep_base_config.yml
@@ -0,0 +1,44 @@
+# configuration which is small enough to run the AMPL with the demo license
+#================= Infrastructure description section =================#
+infrastructure:
+  gml_file: "../graphs/infras/valencia-haven/valencia-haven-1.gml"
+  name: "infra"                                       # name of the graph object
+  label: "id"                                         # GML node attribute to be used as graph node id
+  time_interval_count: 24                             # the number of time frames for the optimization t \in (t0, t1)
+  cluster_move_waypoints: "../graphs/trajectories/paths.gml"            # GML file representing the locations of start, finish, path points
+  coverage_blocking_areas: "../graphs/trajectories/containers.gml"      # GML file storing the coverage blocking areas
+  cluster_src_dst_tuples: [["r1c1", "r9c5"]]          # start and finish labels of cluster moves
+  unloaded_battery_alive_prob: 0.99                   # Probability having a not completly depleted battery by the end of the optimization
+                                                      # time interval if no capacity is used on the mobile node. Same value is set for all mobile nodes
+  full_loaded_battery_alive_prob: 0.5                 # Like above, but with fully loaded mobile node.
+  seed: 0                                             # randomization seed
+#================= Service description section =================#
+service:
+  name: "service"                                     # name of the graph object
+  connected_component_sizes: [26]               # list of integers describing the number (by its length) and size of the connected
+                                                      # service graph components. Each components is a series parallel graph
+  sfc_delays: [1000]                                 # list of delay values, which the chains can take (infra GML measures them in ms)
+  series_parallel_ratio: 0.7                          # ratio of the series and parallel operations at the service graph generation
+  mobile_nfs_per_sfc: 6                               # The number of NFs in each SFC which must be located in the corresponding mobile cluster
+                                                      # (if a chain is shorter, at most all of the NFs are set but not more).
+  seed: 0                                             # randomization seed (can be different from infra, but they together define the task)
+  min_nf_demand: 0                                    # VNF demand is random.randint(min_nf_demand, max_nf_demand) * nf_demand_units
+  max_nf_demand: 4                # NOTE this ensures that every VNF should be able to be mapped from capacity point of view
+  nf_demand_units: 0.249
+#================= Optimization description section =================#
+optimization:
+  time_interval_count: 24                             # same as infrastructure.time_interval_count
+  coverage_threshold: 0.9                             # Least probability the cluster should be covered at all time instances.
+  battery_threshold: 0.6248                               # Least probability which the mobile clusters are not depleted by the end of the
+                                                      # optimization interval with the allocated load.
+                                  # NOTE: this value with full_loaded_battery_alive_prob = 0.5 should always work!
+  improvement_score_limit: 1
+#================= Simulator settings =================#
+simulator:
+  log_file: "mapping.log"
+  console_log_level: "DEBUG"
+  file_log_level: "DEBUG"
+  ampl_model_path: '../ampl/system-model.mod'                           # AMPL model location for the volatile resources model
+  export_ampl_data_path: "../ampl/system-model-generated.dat"           # if given, the generated data is exported for inspection/outer solution
+  run_heuristic: True                                                  # Flags to set which algoritms to run
+  run_ampl: True
diff --git a/simulator/mobile_nf_loads_small_sweep_meta_config.yml b/simulator/mobile_nf_loads_small_sweep_meta_config.yml
new file mode 100644
index 0000000..84f7f9e
--- /dev/null
+++ b/simulator/mobile_nf_loads_small_sweep_meta_config.yml
@@ -0,0 +1,15 @@
+base_config_file: "mobile_nf_loads_small_sweep_base_config.yml"             # Path to config file which stores the structure and
+                                                                            # the default simulation parameters.
+simulation_name: "mobile_nf_loads_small_sweep"                                        # String identifying the experiment (folder created for it)
+threads: 2                                                                  # number of parallel executions of simulations
+non_product_groups:                                                         # list of keys from the config file, where instead of product, zipping should be applied for creating the single configs
+  - [optimization.improvement_score_limit, simulator.run_ampl]
+meta_config_values:                                                         # under this a full single config structure can be given, but
+  service:
+    mobile_nfs_per_sfc: [0, 8, 16, 18, 20, 22, 24, 26]
+    seed: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
+  optimization:
+    battery_threshold: [0.656, 0.6872, 0.7184, 0.7496, 0.7808, 0.812]
+    improvement_score_limit: [2, 1]
+  simulator:
+    run_ampl: [True, False]
commit f25370cd1cfc162bfb52b3c2cf5b25735700eed3
Author: Balazs Nemeth <balazs.nemeth@tmit.bme.hu>
Date:   Fri Nov 15 15:57:37 2019 +0100

    Coordinate between AP selections based on strictness

diff --git a/placement/constraint_violation_checkers.py b/placement/constraint_violation_checkers.py
index b7b580d..9512ede 100644
--- a/placement/constraint_violation_checkers.py
+++ b/placement/constraint_violation_checkers.py
@@ -197,19 +197,10 @@ class DelayAndCoverageViolationChecker(BaseConstraintViolationChecker):
 
         # if the delay and coverage values are violated in none of the subintervals, then we have an AP selection
         if inf_count_subinterval == 0 and negative_rem_delay_subinterval == 0:
-            if self.chosen_ap_ids.is_valid:
-                # check if the AP selection matches with the earlier one, all SFC-s need to agree on one!
-                # (which is enforced by the way AP-s are selected, here we execute a check)
-                for subinterval, ap_id in self.chosen_ap_ids.items():
-                    if self.chosen_ap_ids[subinterval] != current_chosen_ap_ids[subinterval]:
-                        self.log.info("AP selection disagreement in subinterval {} with SFC {}: current AP {}, existing AP selection {}".
-                                      format(subinterval, self.sfc_path, current_chosen_ap_ids[subinterval],
-                                             self.chosen_ap_ids[subinterval]))
-                        self.log.warn("Some SFC-s do not agree on the selected access points in time interval {} based on "
-                                        "minimal delay, coverage obeying method! Current selection: {}, Existing selection: {}".
-                                        format(subinterval, current_chosen_ap_ids, self.chosen_ap_ids.ap_selection))
-            else:
-                self.chosen_ap_ids.add_ap_selection_dict(current_chosen_ap_ids)
+            # replaces the selectino only if the current selection was made based on a more strict latency requirement
+            self.log.debug("Setting current AP selection for SFC {} with delay {}: {}".
+                           format(self.sfc_path, self.sfc_delay, current_chosen_ap_ids))
+            self.chosen_ap_ids.add_ap_selection_dict(current_chosen_ap_ids, self.sfc_delay)
 
         return inf_count_subinterval, negative_rem_delay_subinterval
 
diff --git a/placement/support_classes.py b/placement/support_classes.py
index f872589..6d0f84a 100644
--- a/placement/support_classes.py
+++ b/placement/support_classes.py
@@ -155,6 +155,7 @@ class InvalidableAPSelectionStruct(object):
         No variables should be accessed when the struct is invalid!
         """
         self.struct_valid = False
+        self.current_setting_sfc_delay = float('inf')
         self.ap_selection = {}
 
     def __getitem__(self, subinterval_index):
@@ -166,12 +167,16 @@ class InvalidableAPSelectionStruct(object):
         for k, v in self.ap_selection.items():
             yield k, v
 
-    def add_ap_selection_dict(self, full_selection : dict):
+    def add_ap_selection_dict(self, full_selection : dict, current_setting_sfc_delay):
         self.struct_valid = True
-        self.ap_selection = dict(full_selection)
+        if current_setting_sfc_delay < self.current_setting_sfc_delay:
+            self.current_setting_sfc_delay = current_setting_sfc_delay
+            self.ap_selection = dict(full_selection)
+        # otherwise we keep the current AP selection because it was set by a stricter SFC
 
     def invalidate(self):
         self.struct_valid = False
+        self.current_setting_sfc_delay = float('inf')
 
     @property
     def is_valid(self):
